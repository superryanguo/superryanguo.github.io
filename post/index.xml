<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on superryanguo&#39;s home web</title>
    <link>https://superryanguo.github.io/post/</link>
    <description>Recent content in Posts on superryanguo&#39;s home web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 08 Jul 2023 17:22:00 +0800</lastBuildDate><atom:link href="https://superryanguo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang如何理解缓冲chan和非缓冲chan</title>
      <link>https://superryanguo.github.io/post/golang%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%BC%93%E5%86%B2chan%E5%92%8C%E9%9D%9E%E7%BC%93%E5%86%B2chan/</link>
      <pubDate>Sat, 08 Jul 2023 17:22:00 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/golang%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%BC%93%E5%86%B2chan%E5%92%8C%E9%9D%9E%E7%BC%93%E5%86%B2chan/</guid>
      <description>Golang的缓存chan和非缓存chan的区别 在使用golang的时候，可能都有这样的疑惑：带缓冲区但长度是1的channel和非缓冲channel有什么区别？比如下面的c1和c2 c1 := make(chan int, 1) c2 := make(chan int) 以此，也可以扩充到，缓冲channel和非缓冲channel</description>
    </item>
    
    <item>
      <title>Git Stash如何指定某个文件缓存</title>
      <link>https://superryanguo.github.io/post/git-stash%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98/</link>
      <pubDate>Fri, 07 Jul 2023 19:12:21 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/git-stash%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98/</guid>
      <description>&amp;quot;久未更，架构师不易做，太忙，now来一发&amp;quot; git stash如何只缓存某个文件或者挑几个文件缓存 使用 git stash push 在 git 2.13 之后，可以使用下面的命令 git stash push -m &amp;quot;comments&amp;quot; path/to/src/file 使用 git stash &amp;ndash;patch or git stash -p 如果使用比较老的git版本，没有太好的方法，就是使用git stash &amp;ndash</description>
    </item>
    
    <item>
      <title>盛夏的一天</title>
      <link>https://superryanguo.github.io/post/%E7%9B%9B%E5%A4%8F%E7%9A%84%E4%B8%80%E5%A4%A9/</link>
      <pubDate>Sat, 16 Jul 2022 23:08:54 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/%E7%9B%9B%E5%A4%8F%E7%9A%84%E4%B8%80%E5%A4%A9/</guid>
      <description>TODO: the mov has some kind of problem?</description>
    </item>
    
    <item>
      <title>用一条命令行更改文件夹所有文件名</title>
      <link>https://superryanguo.github.io/post/%E7%94%A8%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9B%B4%E6%94%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%90%8D/</link>
      <pubDate>Sat, 11 Jun 2022 21:01:03 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/%E7%94%A8%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9B%B4%E6%94%B9%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%90%8D/</guid>
      <description>很久没更新，忙着机器学习 是你学习机器学习，还是机器学习你 年中了，不扯了，干货来 &amp;ndash;&amp;gt; 问题：有时候一个文件夹下面很多相同模式名称的文件，如何迅速高效的重新命名它们？！ 思考：bash脚本，再整个循环for i in 啥的，搞个do &amp;hellip;. done之类，似乎有点复杂，awk强大，似乎</description>
    </item>
    
    <item>
      <title>从化十登之攀登三角髻</title>
      <link>https://superryanguo.github.io/post/%E4%BB%8E%E5%8C%96%E5%8D%81%E7%99%BB%E4%B9%8B%E6%94%80%E7%99%BB%E4%B8%89%E8%A7%92%E9%AB%BB/</link>
      <pubDate>Mon, 04 Apr 2022 17:55:16 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/%E4%BB%8E%E5%8C%96%E5%8D%81%E7%99%BB%E4%B9%8B%E6%94%80%E7%99%BB%E4%B8%89%E8%A7%92%E9%AB%BB/</guid>
      <description>✍️记录一下最近爬的从化十登之三角髻，不然对不起我辛苦搭的服务器 iPhone拍照片是有方向技巧的，不然手机里面看着没事但上传上来是歪的，折腾了一下用mac来解决 不多说，咱流水账走起=======&amp;gt; 缘起 天气不错，Gore-Tex徒步鞋似乎在说不要浪费鞋才，</description>
    </item>
    
    <item>
      <title>Git Branch</title>
      <link>https://superryanguo.github.io/post/git-branch/</link>
      <pubDate>Sun, 06 Mar 2022 16:38:13 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/git-branch/</guid>
      <description>git是一个开发利器，现在的程序员都离不开它 可能对于git，不少人命令用的很溜，但并不了结底层实现 这会导致当碰到git相关的开发环境问题时不好解决，或者委曲求全，比如从新clone一个新的repo git优于之前的clearcase以及svn的版本管理软件的重要</description>
    </item>
    
    <item>
      <title>Sudo的命令路径</title>
      <link>https://superryanguo.github.io/post/sudo%E7%9A%84%E5%91%BD%E4%BB%A4%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Fri, 11 Feb 2022 11:40:09 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/sudo%E7%9A%84%E5%91%BD%E4%BB%A4%E8%B7%AF%E5%BE%84/</guid>
      <description>问题： 用linux的sudo命令跑程序的时候，有时候会发现这类错误，比如运行sudo go $ sudo go [sudo] password for ryan: sudo: go: command not found 原因： 我们使用 sudo 时，使用的配置文件是 /etc/sudoers，默认路径是这些： ... Defaults secure_path=&amp;quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&amp;quot; ... 解决方法： 直接编辑(sudo vim)文件/etc/sudoers</description>
    </item>
    
    <item>
      <title>陈氏太极拳新论</title>
      <link>https://superryanguo.github.io/post/2022-01-19-%E9%99%88%E6%B0%8F%E5%A4%AA%E6%9E%81%E6%8B%B3%E6%96%B0%E8%AE%BA/</link>
      <pubDate>Wed, 19 Jan 2022 09:53:24 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/2022-01-19-%E9%99%88%E6%B0%8F%E5%A4%AA%E6%9E%81%E6%8B%B3%E6%96%B0%E8%AE%BA/</guid>
      <description>“太极者，无极而生，动静之机，阴阳之母也。”这句话以及概述了太极的本质，来自于拳论。 古人前辈对太极拳的论述已经不少，现在想作为一个现代人，一个练太极拳十余年的太极拳爱好者，聊聊对太极拳的想法。 太极拳的发源 可以考证的是来自于河南温县陈家沟，创始人是陈王廷，后来陈</description>
    </item>
    
    <item>
      <title>2022-01-15 MicroServicePatternBookRead</title>
      <link>https://superryanguo.github.io/post/2022-01-15-microservicepatternbookread/</link>
      <pubDate>Sat, 15 Jan 2022 16:43:55 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/2022-01-15-microservicepatternbookread/</guid>
      <description>@20220122 第一章 逃离单体地狱 问题：Food To Go（FTGO）是家全美领先的在线餐饮快递企业。最近这家公司的CTO玛丽比较抓狂，原因是项目的关键节点总是要delay。FTGO使用的是单体模型（Order， Delivery， Restaurant， Kitchen， Accou</description>
    </item>
    
    <item>
      <title>2022-01-15 HuaWeiDataDaoBookRead</title>
      <link>https://superryanguo.github.io/post/2022-01-15-huaweidatadaobookread/</link>
      <pubDate>Sat, 15 Jan 2022 16:43:35 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/2022-01-15-huaweidatadaobookread/</guid>
      <description>before@2022-01-15 第一章： 类似华为这种非数字原生企业，在数字化转型过程中困难重重，对于有一定年头的大企业来说，都会碰到这种情况，而对于所有企业来说，数字化都是必经之路 @2022-01-15 立个flag，把书读完，写点读书笔记！ @20220207 第一章：企业需要数字化转型 现实世界&amp;lt;-&amp;gt;数字孪生 业务数据</description>
    </item>
    
    <item>
      <title>2022-01-14 ThisIsTheWay</title>
      <link>https://superryanguo.github.io/post/2022-01-14-mandalorianthisistheway/</link>
      <pubDate>Fri, 14 Jan 2022 17:56:35 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/2022-01-14-mandalorianthisistheway/</guid>
      <description>This Is The Way!此乃正道！ This Is The Way</description>
    </item>
    
    <item>
      <title>Git Submodule 使用指南</title>
      <link>https://superryanguo.github.io/2022/01/09/git-submodule.html</link>
      <pubDate>Sun, 09 Jan 2022 16:54:19 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/2022/01/09/git-submodule.html</guid>
      <description>how to use git submodule git的子模块使用，似乎值得说一说 不少使用了git很久的人，对这一块也不算太熟，实际上子模块的使用是个重要的技能 add git submodule 通过在 git submodule add 命令后面加上想要跟踪的项目的相对或绝对 URL 来添加新的子模块 比如git submodule add https://github.com/chacon</description>
    </item>
    
    <item>
      <title>the first blog第一篇</title>
      <link>https://superryanguo.github.io/post/2022-01-01-my-first-blog/</link>
      <pubDate>Fri, 31 Dec 2021 17:18:29 +0800</pubDate>
      
      <guid>https://superryanguo.github.io/post/2022-01-01-my-first-blog/</guid>
      <description>2022元旦假期 充实 干了这几件事&amp;mdash;&amp;mdash;&amp;gt; 强撸了一个博客网站（开源化功大法好，不要问为什么，问就是本大圣玩技术就这么随心所欲👌） as you can see here 翻越了一座山头（感谢科技，没有让我迷路🙇） 打了几通嘴炮（对群里热点事情点评💬） 给麒麟变色杯开了光</description>
    </item>
    
  </channel>
</rss>
